#!/bin/bash
set -euo pipefail
{

  BS_PATH=/usr/local/bootstrap

  source "$BS_PATH/.env"
  source "$BS_PATH/scripts/lg.sh"

  if [ -z "$USERNAME" ]; then
    lg 'Skipping docker project backup - No user'
  elif [ -z "$GITHUB_AUTH_TOKEN" ]; then
    lg 'Skipping docker project backup - No auth token'
  elif [ -d "$home_directory/docker" ]; then
    home_directory="$(eval echo ~$USERNAME)"

    lg 'Wind down docker'
    docker-compose -f "$home_directory/docker/docker-compose.yml" down

    lg 'Create docker backup file'
    tar -cpzf /tmp/docker.tar.gz -C "$home_directory" docker &>/dev/null

    lg 'Getting asset release id'
    release_id=$(curl -fsSL -H "Authorization: token $GITHUB_AUTH_TOKEN" https://api.github.com/repos/rabidpug/artifacts/releases/latest | jq .id)

    lg 'Getting asset IDs'
    mapfile -t assets < <(curl -fsSL -H "Authorization: token $GITHUB_AUTH_TOKEN" "https://api.github.com/repos/rabidpug/artifacts/releases/$release_id/assets" | jq -c '.[] | {name: .name, id: .id}')

    lg 'Delete existing remote backups'
    for asset in "${assets[@]}"; do
      id=$(echo "$asset" | jq -r .id)
      curl -fsSL -X DELETE -H "Authorization: token $GITHUB_AUTH_TOKEN" "https://api.github.com/repos/rabidpug/artifacts/releases/assets/$id"
    done

    lg 'Upload new backup file to repo'
    curl -fsSL -H "Authorization: token $GITHUB_AUTH_TOKEN" -H "Content-Type: application/octet-stream" --data-binary @/tmp/docker.tar.gz "https://uploads.github.com/repos/rabidpug/artifacts/releases/$release_id/assets?name=docker.tar.gz" >/dev/null

    lg 'Remove local backup file'
    rm -f /tmp/docker.tar.gz

    lg 'Spin up docker'
    docker-compose -f "$home_directory/docker/docker-compose.yml" up -d &>/dev/null
  else
    lg 'Skipping docker project backup - No docker folder'
  fi
} &>/var/log/bootstrap.log
