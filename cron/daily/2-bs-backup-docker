#!/bin/bash
set -euo pipefail
{
  BS_PATH=/usr/local/bootstrap

  source "$BS_PATH/.env"
  source "$BS_PATH/utilities/lg.sh"

  if [ -z "${DEBUG:-}" ]; then
    exec 3>&1 &>/dev/null
  else
    exec 3>&1
  fi

  lg '## BEGINNING DOCKER BACKUP ##'
  if [ -z "$USERNAME" ]; then
    lg 'Skipping docker project backup - No user'
  elif [ -z "$GITHUB_AUTH_TOKEN" ]; then
    lg 'Skipping docker project backup - No auth token'
  elif [ -d "$(eval echo ~$USERNAME)/docker/services" ]; then
    home_directory="$(eval echo ~$USERNAME)"
    services_path="$home_directory/docker/services"

    lg 'Getting asset release id'
    release_id=$(curl -fsSL -H "Authorization: token $GITHUB_AUTH_TOKEN" https://api.github.com/repos/rabidpug/artifacts/releases/latest | jq .id)

    lg 'Getting asset IDs'
    assets=$(curl -fsSL -H "Authorization: token $GITHUB_AUTH_TOKEN" "https://api.github.com/repos/rabidpug/artifacts/releases/$release_id/assets" | jq -c .)
    find "$services_path" -mindepth 1 -maxdepth 1 -type d | while read folder; do
      service=$(basename "$folder")
      if [ -f "$services_path/$service/.directives" ]; then
        source "$services_path/$service/.directives"
      fi

      proceed=1
      down=0
      case "1" in
      "${IDLE:-}")
        lg "$service is idle"
        proceed=0
        ;;
      "${DOWN:-}")
        lg "$service needs to come down"
        down=1
        ;;
      esac
      if [ "$proceed" = "1" ]; then
        if [ "$down" = "1" ]; then
          lg "Winding down $service"
          docker-compose -f "$services_path/$service/docker-compose.yml" down
        fi
        lg "Creating $service backup file"
        tar -cpzf "/tmp/$service.tar.gz" -C "$services_path" "$service"
        if [ "$down" = "1" ]; then
          lg "Winding up $service"
          docker-compose -f "$services_path/$service/docker-compose.yml" up -d
        fi
        asset_id=$(echo "$assets" | jq -rc "map(select(.label == \"$service\")) | .[] | .id")
        if [ ! -z "${asset_id:-}" ]; then
          lg "Delete existing remote backup $asset_id"
          curl -fsSL -X DELETE -H "Authorization: token $GITHUB_AUTH_TOKEN" "https://api.github.com/repos/rabidpug/artifacts/releases/assets/$asset_id"
        fi

        lg 'Upload new backup file to repo'
        curl -fsSL -H "Authorization: token $GITHUB_AUTH_TOKEN" -H "Content-Type: application/octet-stream" --data-binary "@/tmp/$service.tar.gz" "https://uploads.github.com/repos/rabidpug/artifacts/releases/$release_id/assets?name=$service.tar.gz&label=$service"

        lg 'Remove local backup file'
        rm -f "/tmp/$service.tar.gz"
      fi
      unset IDLE
      unset DOWN
    done
  else
    lg 'Skipping docker project backup - No docker folder'
  fi

  lg '## DOCKER BACKUP COMPLETED ##'

} &>>/var/log/bs.log
